package main

import (
	"encoding/json"
	"errors"
	"io"
	"log"

	"github.com/pion/interceptor"
	"github.com/pion/interceptor/pkg/intervalpli"
	"github.com/pion/webrtc/v4"
)

type Publisher struct {
	peer *Peer
}

func (pb *Publisher) handleActivity(client *Client, sdp string) bool {
	pb.initPeerConnection()
	pb.peer.handleIceCandidate(client)
	answer := pb.peer.createAnswer(sdp) 
	
	json, err := json.Marshal(answer)
	if err != nil {
		log.Printf("Failed to Marshal message: %s\n", err.Error())
		return false
	}	
	
	client.hub.sendAnswer <- json

	return true
}

func (pb *Publisher) initPeerConnection() {
	m := &webrtc.MediaEngine{}
	i := &interceptor.Registry{}

	// Use default codecs
	if err := m.RegisterDefaultCodecs(); err != nil {
		log.Printf("Failed to RegisterDefaultCodecs: %s\n", err.Error())
	}

	// Use the default set of Interceptors
	if err := webrtc.RegisterDefaultInterceptors(m, i); err != nil {
		log.Printf("Failed to RegisterDefaultInterceptors: %s\n", err.Error())
	}

	// Register a intervalpli factory
	// This interceptor sends a PLI every 3 seconds. A PLI causes a video keyframe to be generated by the sender.
	// This makes our video seekable and more error resilent, but at a cost of lower picture quality and higher bitrates
	// A real world application should process incoming RTCP packets from viewers and forward them to senders
	intervalPliFactory, err := intervalpli.NewReceiverInterceptor()
	if err != nil {
		panic(err)
	}
	i.Add(intervalPliFactory)

	// Create a new WebRTC API instance
	api := webrtc.NewAPI(webrtc.WithMediaEngine(m), webrtc.WithInterceptorRegistry(i))
	peerConnection, err := api.NewPeerConnection(peerconfig)
	if err != nil {
		log.Printf("Failed to create new Peer Connection: %s\n", err.Error())
	}

	pb.peer.conn = peerConnection
	pb.peer.handleConnectionState()
	pb.handlePeerTrack()
}

func (pb *Publisher) handlePeerTrack() {
	// TODO find out who own this localtrack. maybe channel
	localTrackChan := make(chan *webrtc.TrackLocalStaticRTP)
	pb.peer.conn.OnTrack(func(remoteTrack *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) { //nolint: revive
		// Create a local track, all our SFU clients will be fed via this track
		localTrack, newTrackErr := webrtc.NewTrackLocalStaticRTP(remoteTrack.Codec().RTPCodecCapability, "video", "pion")
		if newTrackErr != nil {
			log.Printf("Failed to create NewTrackLocalStaticRTP: %s\n", newTrackErr.Error())
		}

		localTrackChan <- localTrack

		rtpBuf := make([]byte, 1400)
		for {
			i, _, readErr := remoteTrack.Read(rtpBuf)
			if readErr != nil {
				log.Printf("Failed to remoteTrack.Read: %s\n", readErr.Error())
			}

			// ErrClosedPipe means we don't have any subscribers, this is ok if no peers have connected yet
			if _, err := localTrack.Write(rtpBuf[:i]); err != nil && !errors.Is(err, io.ErrClosedPipe) {
				log.Printf("Failed to localTrack.Write: %s\n", err.Error())
			}
		}
	})
}